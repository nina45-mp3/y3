#!/bin/bash
#PBS -l walltime=02:00:00
#PBS -l select=1:ncpus=16:mem=48gb:ompthreads=8


#============================================================
## ONLY WHEN RUNNING SCRIPT FOR FIRST TIME
echo "Loading miniforge module..."
module load miniforge/3
#============================================================

# Install conda.
eval "$(~/miniforge3/bin/conda shell.bash hook)"
# Disable automatic loading of base environment - to create new environment for each workflow and never modify the base environment (which can break the conda installation).
conda config --set auto_activate_base false
# Add miniforge3 directory (containing conda, etc.) to job PATH.
PBS_O_PATH=$PBS_O_PATH:/rds/general/user/nb122/home/miniforge3/
# Activate conda environment.
echo "Activating conda environment..."
conda activate blastn_hostsandsources

cd $PBS_O_WORKDIR

echo " "
echo " "


#---------------------------------------------------------------------------------------------------


touch collated

less blastn_unique_taxIDs | while read x;
do
	echo "Reading $x..."
        # Save current taxID (i.e., value of $x) to first column of collated5.
        echo "$x" >> collated

        # Retrieve JSON entry for current taxID.
        echo "Retrieving JSON..."
        datasets summary genome taxon $x > json

        # Extract all isolation_source and host results TOGETHER.
	echo "Extracting all isolation_source and host results..."
	jq -r '.reports[] | .["assembly_info"] | .["biosample"] | .isolation_source + "_" + .host' json > sourcesandhosts

	# Fill missing sources and hosts with 'Unknown' if required, and paste them together in pairs.
	echo "Filling missing sources with 'Unknown'..."
	sed -i '/^_/ s/_/Unknown_/' sourcesandhosts
	echo "Filling missing hosts with 'Unknown'..."
	sed -i '/_$/ s/_/_Unknown/g' sourcesandhosts

	# Rename other variations of missing results with 'Unknown' for consistency (e.g., 'NA', 'Not available').
	echo "Renaming other variations of missing results with 'Unknown'..."
	sed 's/Not Collected\|Not provided\|not provided\|null\|Missing\|missing\|unknown\|Not applicable\|not applicable\|Not available\|not available\|Not collected\|not collected\|\<Unknown: to be reported later\>\|unkown\|\<Unknown: Unknown\>\|SOURCE NOT GIVEN\|Not supplied\|not detemined/Unknown/g' sourcesandhosts > renamed
	sed -i 's/not_blood\|Boold/blood/g' renamed
	sed -i 's/?/Unknown/g' renamed
	sed -i 's/-_/Unknown_/g' renamed
	sed -i 's/NA_/Unknown_/g' renamed
	sed -i 's/_NA/_Unknown/g' renamed
	sed -i 's@n/a_@Unknown_@g' renamed

	# Identify unique source-host pairs and sort by frequency.
	echo "Identifying unique source-host pairs and sorting by frequency..."
	sort renamed | uniq -c | sort -bgr > uniquepairs

	# Extract the most common result/s, isolating the source-host pair/s from the actual frequency count.
	## Identify top line, with highest frequency count.
	sed -i 's/^ *//' uniquepairs
	FIRSTLINE=$(head -n 1 uniquepairs)
	## Isolate the frequency count of the top line.
	FREQ=$(echo "$FIRSTLINE" | cut -d " " -f1)
	## Extract all results sharing the same frequency count, saving them into a comma-delimited list.
	grep -w "$FREQ" uniquepairs | cut -f1 -d" " --complement > topall
	if [[ $(wc -l <topall) -ge 2 ]]
	then
		cat topall | paste -s -d',' > temp; mv temp topall
	fi
	TOPPAIR=$(cat topall)

	echo "$TOPPAIR"

##	echo "Isolating the most common source-host pair/s..."
##	head -n 1 uniquepairs > topall
##	TOPPAIR=$(sed 's/^ *//' topall | cut -f1 -d" " --complement)

	# Save top source-host pair as second, tab-delimited column of collated.
	echo "Appending $TOPPAIR to collated..."
	sed -i '/'"$x"'/s/$/\t'"$TOPPAIR"'/' collated


	echo "Extraction for $x complete."
	echo " "

done


# Replace all underscores with a tab.
#echo "Replacing all underscores, between source and host, with tab..."
#sed -i $'s/_/\t/' collated


echo " "
echo " "


#---------------------------------------------------------------------------------------------------


# Deactivate conda environment.
echo "Deactivating conda environment..."
conda deactivate

# Print job's environment.
echo "Printing job environment..."
printenv
